input {
  # Uncomment the below to have Logstash execute the log collection PowerShell script
  # The schedule is configured to run every five minutes
  # I prefer to leave it outside the pipeline in case Logstash crashes
  # exec {
    # command => 'C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -NonInteractive -WindowStyle Hidden -command ". D:\Logstash\scripts\CFLogPull.ps1"'
    # schedule => "*/5 * * * *"
  # }
  file {
  #Enterprise logs
    id => "ELS Logs"
    path => "d:/Ingest/CloudFlare/*.txt"
    stat_interval => 2
    start_position => "beginning"
    close_older => 300
    type => "activity"
  }
  file {
  #Organization audit logs
    id => "Audit Logs"
    path => "d:/Ingest/CloudFlare/*.log"
    mode => "read"
    stat_interval => 2
    start_position => "beginning"
    close_older => 300
    type => "audit"
  }
  file {
  #Reingest Pipeline
    id => "ELS Reingest"
    path => "d:/Ingest/CloudFlareReingest/*.txt"
    mode => "read"
    stat_interval => 2
    start_position => "beginning"
    close_older => 300
    type => "activity"
  }
}
filter {
  mutate {
    id => "Message Normalize"
    lowercase => [ "message" ]
  }
  #ELS Logs have blank lines with only a carriage return. The following IF drops those lines to prevent false positive error messages from appearing in the logs.
  if [message] =~ "^\r" {
    drop {
      id => "Remove empty lines"
    }
  }
  json {
  #Parse the data into fields
    id => "Field Parse"
    source => "message"
  }
  #Begin parsing audit logs
  if [type] == "audit" {
    mutate {
      id => "Audit Field Standardize"
      rename => {
        "[id]" => "[change][id]"
        "[interface]" => "[change][interface]"
        "[actor][email]" => "[change][actor]"
        "[actor][ip]" => "[change][ip]"
        "[actor][type]" => "[change][user_type]"
        "[actor][id]" => "[change][actor_id]"
        "[metadata][zone_name]" => "[change][zone]"
        "[metadata][zone_tag]" => "[change][zone_tag]"
        "[when]" => "[change][date]"
        "[action][result]" => "[change][success]"
        "[action][info]" => "[change][info]"
        "[action][type]" => "[change][activity]"
        "[metadata][cf-ray]" => "[change][ray_id]"
      }
    }
    mutate {
      id => "Audit Field Stripping"
      gsub => [
        "[change][actor]", "\@.*\..*", "",
        "[change][date]", "T|t", " ",
        "[change][date]", "z|\..{1,6}", ""
      ]
    }
    date {
      id => "Audit Timestamp Formatting"
      match => [ "[change][date]", "yyyy-MM-dd HH:mm:ss" ]
      timezone => "Etc/UTC"
    }
    translate {
      id => "Audit Zone ID Translation"
      field => "[change][zone]"
      destination => "[change][zone_id]"
      dictionary_path => "D:/Logstash/dictionaries/CloudFlare/auditzones.yaml"
      refresh_behaviour => "replace"
    }
    if [resource][type] == "dns_record" {
      mutate {
        id => "DNS Resource Field Standardize"
        rename => {
          "[metadata][content]" => "[dns][content][current]"
          "[metadata][name]" => "[dns][name][current]"
          "[metadata][proxied]" => "[dns][proxied][current]"
          "[metadata][ttl]" => "[dns][ttl][current]"
          "[metadata][prio]" => "[dns][priority][current]"
          "[metadata][old_content]" => "[dns][content][previous]"
          "[metadata][old_name]" => "[dns][name][previous]"
          "[metadata][old_proxied]" => "[dns][proxied][previous]"
          "[metadata][old_ttl]" => "[dns][ttl][previous]"
          "[metadata][old_prio]" => "[dns][priority][previous]"
          "[metadata][type]" => "[dns][type]"
        }
      }
      if [change][activity] == "rec_add" {
        translate {
          id => "Translate DNS Content"
          field => "[resource][id]"
          destination => "[dns][content][current]"
          dictionary_path => "D:/Logstash/dictionaries/CloudFlare/dns/content.yaml"
          refresh_behaviour => "replace"
          override => true
        }
        translate {
          id => "Translate DNS Created On"
          field => "[resource][id]"
          destination => "[dns][created_on]"
          dictionary_path => "D:/Logstash/dictionaries/CloudFlare/dns/created_on.yaml"
          refresh_behaviour => "replace"
          override => true
        }
        translate {
          id => "Translate DNS Modified"
          field => "[resource][id]"
          destination => "[dns][modified_on]"
          dictionary_path => "D:/Logstash/dictionaries/CloudFlare/dns/modified_on.yaml"
          refresh_behaviour => "replace"
          override => true
        }
        translate {
          id => "Translate DNS Name"
          field => "[resource][id]"
          destination => "[dns][name][current]"
          dictionary_path => "D:/Logstash/dictionaries/CloudFlare/dns/name.yaml"
          refresh_behaviour => "replace"
          override => true
        }
        translate {
          id => "Translate DNS Proxiable"
          field => "[resource][id]"
          destination => "[dns][proxiable][current]"
          dictionary_path => "D:/Logstash/dictionaries/CloudFlare/dns/proxiable.yaml"
          refresh_behaviour => "replace"
          override => true
        }
        translate {
          id => "Translate DNS Proxied"
          field => "[resource][id]"
          destination => "[dns][proxied][current]"
          dictionary_path => "D:/Logstash/dictionaries/CloudFlare/dns/proxied.yaml"
          refresh_behaviour => "replace"
          override => true
        }
        translate {
          id => "Translate DNS TTL"
          field => "[resource][id]"
          destination => "[dns][ttl][current]"
          dictionary_path => "D:/Logstash/dictionaries/CloudFlare/dns/ttl.yaml"
          refresh_behaviour => "replace"
          override => true
        }
        translate {
          id => "Translate DNS Type"
          field => "[resource][id]"
          destination => "[dns][type][current]"
          dictionary_path => "D:/Logstash/dictionaries/CloudFlare/dns/type.yaml"
          refresh_behaviour => "replace"
          override => true
        }
        # http {
          # headers => {
            # "X-Auth-Key" => "56f96fce59d1967e452a7a1234705ad6d886c"
            # "X-Auth-Email" => "wwalker@stlouisco.com"
          # }
          # body_format => "json"
          # url => "https://api.cloudflare.com/client/v4/zones/%{[change][zone_id]}/dns_records/%{[resource][id]}"
        # }
        # mutate {
          # rename => {
            # "[body][result][content]" => "[dns][content][current]"
            # "[body][result][created_on]" => "[dns][created_on]"
            # "[body][result][modified_on]" => "[dns][modified_on]"
            # "[body][result][name]" => "[dns][name][current]"
            # "[body][result][proxiable]" => "[dns][proxiable][current]"
            # "[body][result][proxied]" => "[dns][proxied][current]"
            # "[body][result][ttl]" => "[dns][ttl][current]"
            # "[body][result][type]" => "[dns][type]"
          # }
        # }
        # if "_httprequestfailure" in [tags] {
          # mutate {
            # remove_tag => [ "_httprequestfailure" ]
            # add_tag => [ "record_deleted" ]
          # }
        # }
      }
      translate {
        id => "Translate DNS Activities" 
        field => "[change][activity]"
        destination => "[change][activity]"
        dictionary => {
          "rec_add" => "create"
          "set" => "update"
          "delete" => "delete"
        }
        refresh_behaviour => "replace"
        override => true
      }
    }
    if [resource][type] == "firewallrules" {
      translate {
        id => "Translate Firewall Rule Action"
        field => "[resource][id]"
        destination => "[rule][action]"
        dictionary_path => "D:/Logstash/dictionaries/CloudFlare/fw/action.yaml"
        refresh_behaviour => "replace"
        override => true
      }
      translate {
        id => "Translate Firewall Rule Created"
        field => "[resource][id]"
        destination => "[rule][created_on]"
        dictionary_path => "D:/Logstash/dictionaries/CloudFlare/fw/created.yaml"
        refresh_behaviour => "replace"
        override => true
      }
      translate {
        id => "Translate Firewall Rule Description"
        field => "[resource][id]"
        destination => "[rule][description]"
        dictionary_path => "D:/Logstash/dictionaries/CloudFlare/fw/description.yaml"
        refresh_behaviour => "replace"
        override => true
      }
      translate {
        id => "Translate Firewall Rule Expression"
        field => "[resource][id]"
        destination => "[rule][expression]"
        dictionary_path => "D:/Logstash/dictionaries/CloudFlare/fw/expression.yaml"
        refresh_behaviour => "replace"
        override => true
      }
      translate {
        id => "Translate Firewall Rule Paused"
        field => "[resource][id]"
        destination => "[rule][enabled]"
        dictionary_path => "D:/Logstash/dictionaries/CloudFlare/fw/paused.yaml"
        refresh_behaviour => "replace"
        override => true
      }
      translate {
        id => "Translate Firewall Rule Modified"
        field => "[resource][id]"
        destination => "[rule][modified_on]"
        dictionary_path => "D:/Logstash/dictionaries/CloudFlare/fw/modified.yaml"
        refresh_behaviour => "replace"
        override => true
      }
      translate {
        id => "Translate Firewall Rule Priority"
        field => "[resource][id]"
        destination => "[rule][priority]"
        dictionary_path => "D:/Logstash/dictionaries/CloudFlare/fw/priority.yaml"
        refresh_behaviour => "replace"
        override => true
      }
      # http {
        # headers => {
          # "X-Auth-Key" => "56f96fce59d1967e452a7a1234705ad6d886c"
          # "X-Auth-Email" => "wwalker@stlouisco.com"
        # }
        # url => "https://api.cloudflare.com/client/v4/zones/%{[change][zone_id]}/firewall/rules/%{[resource][id]}"
      # }
      # mutate {
        # rename => {
          # "[body][result][action]" => "[rule][action]"
          # "[body][result][created_on]" => "[rule][created_on]"
          # "[body][result][description]" => "[rule][description]"
          # "[body][result][filter][expression]" => "[rule][expression]"
          # "[body][result][paused]" => "[rule][enabled]"
          # "[body][result][modified_on]" => "[rule][modified_on]"
          # "[body][result][priority]" => "[rule][priority]"
        # }
      # }
      translate {
        id => "Translate Firewall Rule Enabled to Bool"
        field => "[rule][enabled]"
        destination => "[rule][enabled]"
        dictionary => {
          "false" => "true"
          "true" => "false"
        }
        refresh_behaviour => "replace"
        override => true
      }
      translate {
        id => "Translate Firewall Rule Actions"
        field => "[change][activity]"
        destination => "[change][activity]"
        dictionary => {
          "firewallrulesapi_update" => "update"
          "firewallrulesapi_create" => "create"
          "firewallrulesapi_delete" => "delete"
        }
        refresh_behaviour => "replace"
        override => true
      }
    }
    if [resource][type] == "filter" {
      translate {
        id => "Translate Filter Expression"
        field => "[resource][id]"
        destination => "[filter][expression]"
        dictionary_path => "D:/Logstash/dictionaries/CloudFlare/fw/expression.yaml"
        refresh_behaviour => "replace"
        override => true
      }
      translate {
        id => "Translate Filter Paused"
        field => "[resource][id]"
        destination => "[filter][enabled]"
        dictionary_path => "D:/Logstash/dictionaries/CloudFlare/fw/paused.yaml"
        refresh_behaviour => "replace"
        override => true
      }
      # http {
        # headers => {
          # "X-Auth-Key" => "56f96fce59d1967e452a7a1234705ad6d886c"
          # "X-Auth-Email" => "wwalker@stlouisco.com"
        # }
        # url => "https://api.cloudflare.com/client/v4/zones/%{[change][zone_id]}/filters/%{[resource][id]}"
      # }
      # mutate {
        # rename => {
        # "[body][result][expression]" => "[filter][expression]"
        # "[body][result][paused]" => "[filter][enabled]"
        # }
      # }
      translate {
        id => "Translate Filter Enabled To Bool"
        field => "[filter][enabled]"
        destination => "[filter][enabled]"
        dictionary => {
          "false" => "true"
          "true" => "false"
        }
        refresh_behaviour => "replace"
        override => true
      }
    }
    if [resource][type] == "account" {
      if [change][activity] == "add_member" or [change][activity] == "accept_member" or [change][activity] == "expire_member" or [change][activity] == "remove_member" or [change][activity] == "set_member_roles" {
        mutate {
          id => "New User Field Standardize 1"
          rename => {
          "[metadata][account_name]" => "[new_user][account]"
          "[metadata][user_email]" => "[new_user][email]"
          "[metadata][roles]" => "[new_user][roles]"
          "[metadata][acted_on_behalf_of]" => "[new_user][creator]"
          }
        }
      }
      if [change][activity] == "mfa_enabled" or [change][activity] == "mfa_disabled" {
        mutate {
          id => "MFA Field Standardize"
          rename => {
            "[metadata][mfa_type]" => "[mfa][type]"
            "[metadata][acted_on_behalf_of]" => "[change][actor]"
          }
          add_field => {
            "[mfa][state]" => "%{[change][info]}"
          }
        }
        mutate {
          id => "MFA Field Stripping"
          gsub => [
            "[mfa][state]", ".*(?!\w*$) ", ""
          ]
        }
      }
      if [change][activity] == "logout" {
        mutate {
          id => "Logout Field Standardize"
          rename => {
            "[metadata][acted_on_behalf_of]" => "[change][actor]"
          }
        }
      }
      if [change][activity] == "delete" {
        mutate {
          id => "DNS Delete Field Standardize"
          rename => {
            "[metadata][content]" => "[dns][content][current]"
            "[metadata][name]" => "[dns][name][current]"
          }
          update => {
            "[resource][type]" => "dns_record"
          }
        }
      }
    }
    if [resource][type] == "zone" {
      if [change][activity] == "toggle_waf_set" {
        # if [metadata][pack] == "cloudflare" {
          # http {
            # body_format => "json"
            # headers => {
              # "X-Auth-Key" => "56f96fce59d1967e452a7a1234705ad6d886c"
              # "X-Auth-Email" => "wwalker@stlouisco.com"
            # }
            # url => "https://api.cloudflare.com/client/v4/zones/%{[change][zone_id]}/firewall/waf/packages?name=CloudFlare"
          # }
          # mutate {
            # add_field => {
              # "[package][detection]" => "%{[body][result]}"
            # }
          # }
        # }
        # else if [metadata][pack] == "owasp" {
          # http {
            # body_format => "json"
            # headers => {
              # "X-Auth-Key" => "56f96fce59d1967e452a7a1234705ad6d886c"
              # "X-Auth-Email" => "wwalker@stlouisco.com"
            # }
            # url => "https://api.cloudflare.com/client/v4/zones/%{[change][zone_id]}/firewall/waf/packages?name=OWASP%20ModSecurity%20Core%20Rule%20Set"
          # }
          # mutate {
            # add_field => {
              # "[package][detection]" => "%{[body][result]}"
              # "[package][action]" => "%{[body][result]}"
              # "[package][sensitivity]" => "%{[body][result]}"
            # }
          # }
        # }
        # else if [metadata][pack] == "internal" {
          # http {
            # body_format => "json"
            # headers => {
              # "X-Auth-Key" => "56f96fce59d1967e452a7a1234705ad6d886c"
              # "X-Auth-Email" => "wwalker@stlouisco.com"
            # }
            # url => "https://api.cloudflare.com/client/v4/zones/%{[change][zone_id]}/firewall/waf/packages?name=USER"
          # }
          # mutate {
            # add_field => {
              # "[package][detection]" => "%{[body][result]}"
            # }
          # }
        # }
        # mutate {
          # gsub => [
            # "[package][detection]", ".*(?=detection_mode=\w*)|, name.*", "",
            # "[package][action]", ".*(?=action_mode=\w*)", "",
            # "[package][sensitivity]", ".*(?=sensitivity=\w*)", "",
            # "[package][detection]", "detection_mode=", "",
            # "[package][action]", "action_mode=|\}", "",
            # "[package][sensitivity]", "sensitivity=|,.*", ""
          # ]
        # }
        mutate {
          id => "WAF Package Field Standardize"
          rename => {
            "[metadata][pack]" => "[waf][package]"
            "[metadata][set]" => "[waf][rule_group]"
            "[metadata][rule_id]" => "[waf][rule_id]"
            "[metadata][rule_desc]" => "[waf][rule_description]"
            "[metadata][value]" => "[waf][value]"
          }
        }
      }
      if [change][activity] == "toggle_waf_rule" {
        mutate {
          id => "WAF Rule Field Standardize"
          rename => {
            "[metadata][pack]" => "[waf][package]"
            "[metadata][set]" => "[waf][rule_group]"
            "[metadata][rule_id]" => "[waf][rule_id]"
            "[metadata][rule_desc]" => "[waf][rule_description]"
            "[metadata][value]" => "[waf][value]"
          }
        }
      }
      if [change][activity] == "change_setting" {
        if [metadata][name] == "auto_minify" {
          mutate {
            id => "Auto-Minify Field Standardize"
            rename => {
              "[metadata][old_value][css]" => "[setting][auto_minify][previous][css]"
              "[metadata][old_value][html]" => "[setting][auto_minify][previous][html]"
              "[metadata][old_value][js]" => "[setting][auto_minify][previous][js]"
              "[metadata][value][css]" => "[setting][auto_minify][current][css]"
              "[metadata][value][html]" => "[setting][auto_minify][current][html]"
              "[metadata][value][js]" => "[setting][auto_minify][current][js]"
              "[metadata][name]" => "[setting][name]"
              "[metadata][type]" => "[setting][type]"
            }
          }
        }
        else if [metadata][name] == "mobile_redirect" {
          mutate {
            id => "Mobile Field Standardize"
            rename => {
              "[metadata][old_value][enabled]" => "[setting][mobile_redirect][previous][enabled]"
              "[metadata][old_value][path]" => "[setting][mobile_redirect][previous][path]"
              "[metadata][old_value][subdomain]" => "[setting][mobile_redirect][previous][subdomain]"
              "[metadata][value][enabled]" => "[setting][mobile_redirect][current][enabled]"
              "[metadata][value][path]" => "[setting][mobile_redirect][current][path]"
              "[metadata][value][subdomain]" => "[setting][mobile_redirect][current][subdomain]"
              "[metadata][name]" => "[setting][name]"
              "[metadata][type]" => "[setting][type]"
            }
          }
        } else {
          mutate {
            id => "Settings Field Standardize"
            rename => {
              "[metadata][name]" => "[setting][name]"
              "[metadata][type]" => "[setting][type]"
              "[metadata][value]" => "[setting][value][current]"
              "[metadata][old_value]" => "[setting][value][previous]"
              "[metadata][acted_on_behalf_of]" => "[setting][on_behalf]"
            }
          }
        }
      }
      if [change][activity] == "zone_reset_check" {
        mutate {
          id => "Zone Reset Modifications 1"
          add_field => {
            "[change][zone]" => "%{[change][info]}"
          }
        }
        mutate {
          id => "Zone Reset Modifications 2"
          gsub => [
            "[change][zone]", "^\w*\(.*\) ", ""
          ]
        }
      }
      # if [change][activity] == "set_min_tls_version" {
        # http {
          # body_format => "json"
          # headers => {
            # "X-Auth-Key" => "56f96fce59d1967e452a7a1234705ad6d886c"
            # "X-Auth-Email" => "wwalker@stlouisco.com"
          # }
          # url => "https://api.cloudflare.com/client/v4/zones/%{[change][zone_id]}/settings/min_tls_version"
        # }
        # mutate {
          # rename => {
            # "[body][result][value]" => "[min_tls]"
          # }
        # }
      # }
    }
    if [resource][type] == "pagerule" {
      mutate {
        id => "Page Rule Field Standardize"
        rename => {
          "[metadata][pr_behavior][apps]" => "[page_rule][apps][current]"
          "[metadata][pr_behavior][browser_cache_ttl]" => "[page_rule][browser_cache_ttl][current]"
          "[metadata][pr_behavior][browser_integrity_check]" => "[page_rule][browser_integrity_check][current]"
          "[metadata][pr_behavior][cache_level]" => "[page_rule][cache_level][current]"
          "[metadata][pr_behavior][forward_status_code]" => "[page_rule][forward_status][current]"
          "[metadata][pr_behavior][forward_url]" => "[page_rule][forward_url][current]"
          "[metadata][pr_behavior][mirage]" => "[page_rule][mirage][current]"
          "[metadata][pr_behavior][origin_error_pass_thru]" => "[page_rule][origin_error_pass_thru][current]"
          "[metadata][pr_behavior][performance]" => "[page_rule][performance][current]"
          "[metadata][pr_behavior][polish]" => "[page_rule][polish][current]"
          "[metadata][pr_behavior][query_string_sort]" => "[page_rule][query_string_sort][current]"
          "[metadata][pr_behavior][rocket_loader]" => "[page_rule][rocket_loader][current]"
          "[metadata][pr_behavior][security]" => "[page_rule][security][current]"
          "[metadata][pr_behavior][security_level]" => "[page_rule][security_level][current]"
          "[metadata][pr_behavior][web_application_firewall]" => "[page_rule][waf][current]"
          "[metadata][pr_match]" => "[page_rule][match_pattern][current]"
          "[metadata][pr_priority]" => "[page_rule][priority][current]"
          "[metadata][pr_status]" => "[page_rule][status][current]"
          "[metadata][old_pr_behavior][apps]" => "[page_rule][apps][previous]"
          "[metadata][old_pr_behavior][browser_cache_ttl]" => "[page_rule][browser_cache_ttl][previous]"
          "[metadata][old_pr_behavior][browser_integrity_check]" => "[page_rule][browser_integrity_check][previous]"
          "[metadata][old_pr_behavior][cache_level]" => "[page_rule][cache_level][previous]"
          "[metadata][old_pr_behavior][forward_status_code]" => "[page_rule][forward_status][previous]"
          "[metadata][old_pr_behavior][forward_url]" => "[page_rule][forward_url][previous]"
          "[metadata][old_pr_behavior][mirage]" => "[page_rule][mirage][previous]"
          "[metadata][old_pr_behavior][origin_error_pass_thru]" => "[page_rule][origin_error_pass_thru][previous]"
          "[metadata][old_pr_behavior][performance]" => "[page_rule][performance][previous]"
          "[metadata][old_pr_behavior][polish]" => "[page_rule][polish][previous]"
          "[metadata][old_pr_behavior][query_string_sort]" => "[page_rule][query_string_sort][previous]"
          "[metadata][old_pr_behavior][rocket_loader]" => "[page_rule][rocket_loader][previous]"
          "[metadata][old_pr_behavior][security]" => "[page_rule][security][previous]"
          "[metadata][old_pr_behavior][security_level]" => "[page_rule][security_level][previous]"
          "[metadata][old_pr_behavior][web_application_firewall]" => "[page_rule][waf][previous]"
          "[metadata][old_pr_match]" => "[page_rule][match_pattern][previous]"
          "[metadata][old_pr_priority]" => "[page_rule][priority][previous]"
          "[metadata][old_pr_status]" => "[page_rule][status][previous]"
        }
        gsub => [
          "[page_rule][browser_cache_ttl][current]", "s", "",
          "[page_rule][browser_cache_ttl][previous]", "s", ""
        ]
      }
    }
    if [resource][type] == "user" {
      if [change][activity] == "join_org" {
        mutate {
          id => "New User Field Standardize 2"
          rename => {
            "[metadata][account_name]" => "[new_user][account]"
            "[metadata][user_email]" => "[new_user][email]"
          }
        }
      }
    }
    mutate {
      id => "Field Removal"
      lowercase => [
        "[dns][type]"
      ]
      remove_field => [
        "[body]",
        "[headers]",
        "[metadata][zone_id]"
      ]
    }
  }
  #Begin parsing activity logs
  else if [type] == "activity" {
    #The following IF/ELSE statement creates the 'full_url' field.
    if [clientsslprotocol] == "none" {
      mutate {
        id => "Full URL - HTTP"
        add_field => {
          "full_url" => "http://%{clientrequesthost}%{clientrequesturi}"
        }
      }
    } else {
      mutate {
        id => "Full URL - HTTPS"
        add_field => {
          "full_url" => "https://%{clientrequesthost}%{clientrequesturi}"
        }
      }
    }
    #Enrich each event with location data extracted from the clientip field.
    geoip {
      id => "ClientIP Geo"
      source => "clientip"
      fields => [city_name,country_name,latitude,longitude,timezone]
      target => "[client][location]"
      add_field => {
        "[client][location][coordinates]" => "%{[client][location][latitude]}, %{[client][location][longitude]}"
      }
    }
    if [edgeserverip] {
      geoip {
        id => "EdgeServerIP Geo"
        source => "edgeserverip"
        fields => [city_name,latitude,longitude]
        target => "[edge][location]"
        add_field => {
          "[edge][location][coordinates]" => "%{[edge][location][latitude]}, %{[edge][location][longitude]}"
        }
      }
    }
    if [originip] {
      geoip {
        id => "Origin IP Geo"
        source => "originip"
        fields => [city_name,latitude,longitude]
        target => "[origin][location]"
        add_field => {
          "[origin][location][coordinates]" => "%{[origin][location][latitude]}, %{[origin][location][longitude]}"
        }
      }
    }
    if [originip] == "" {
      mutate {
        id => "Remove Blank Origin IP"
        remove_field => [ "originip" ]
      }
    }
    if [edgeserverip] == "" {
      mutate {
        id => "Remove Blank Edge IP"
        remove_field => [ "edgeserverip" ]
      }
    }
    #Parse the data in clientrequestuseragent field.
    useragent {
      id => "User Agent Parse"
      source => "clientrequestuseragent"
      target => "[client][user_agent]"
      regexes => "D:\Logstash\dictionaries\uaregexes.yaml"
    }
    #General field modifications
    mutate {
      id => "Field Mod. Stage 1"
      gsub => [
        "originresponsehttpexpires", " ...$|^..., ", "",
        "originresponsehttplastmodified", " ...$|^..., ", "",
        "clientrequesthost", ':\d+', ''
      ]
      add_field => {
        "domain" => "%{clientrequesthost}"
      }
    }
    mutate {
      id => "Field Mod. Stage 2"
      gsub => [
        "domain", ".*(?=\..*\..*$)\.", "",
        "cachecachestatus", "unknown", "uncacheable",
        "originsslprotocol", "unknown", "none",
        "wafaction", "unknown", "pass",
        "wafprofile", "unknown", "none"
      ]
    }
    translate {
      id => "CacheResponse Translate"
      dictionary_path => "D:/Logstash/dictionaries/httpstatuscodes.yaml"
      field => "cacheresponsestatus"
      destination => "cacheresponsestatusdescription"
      refresh_behaviour => "replace"
    }
    translate {
      id => "EdgeResponse Translate"
      dictionary_path => "D:/Logstash/dictionaries/httpstatuscodes.yaml"
      field => "edgeresponsestatus"
      destination => "edgeresponsestatusdescription"
      refresh_behaviour => "replace"
    }
    translate {
      id => "OriginResponse Translate"
      dictionary_path => "D:/Logstash/dictionaries/httpstatuscodes.yaml"
      field => "originresponsestatus"
      destination => "originresponsestatusdescription"
      refresh_behaviour => "replace"
    }
    translate {
      id => "Edge Pathing Source Translate"
      field => "edgepathingsrc"
      destination => "edgepathingsrcdescription"
      dictionary => {
        "bic" => "Browser Integrity Check"
        "err" => "An error, typically 1XXX type error"
        "filterbasedfirewall" => "User defined firewall rule"
        "hot" => "Hot Linking"
        "macro" => "Macro (e.g. IP reputation based, or grey listing)"
        "pathing" => "Operation (EdgePathingOp)"
        "protect" => "Gatebot"
        "skip" => "Always Online / CDNJS / JSDelivr whitelisting source code"
        "undef" => "invalid HTTP"
        "unknown" => "Not classified"
        "user" => "User rule (e.g. country block, IP block etc)"
      }
    }
    translate {
      id => "Edge Pathing Operation Translate"
      field => "edgepathingop"
      destination => "edgepathingopdescription"
      dictionary => {
        "bad visitor" => "failed challenge"
        "ban" => "Ban - request was blocked"
        "chl" => "Challenge - request was challenged"
        "err_host" => "The request returned an error, typically 1XXX type error"
        "pathing" => "Status (EdgePathingStatus)"
        "temp_Ok" => "Clearance cookie issued (e.g. visitor passed a JS or Captcha Challenge)"
        "unknown" => "No specific action"
        "wl" => "Whitelist - this is the default for visitors, so request is allowed to proceed normally"
      }
    }
    translate {
      id => "Edge Pathing Status Translate"
      field => "edgepathingstatus"
      destination => "edgepathingstatusdescription"
      dictionary => {
        "aocrawl" => "Always Online Crawler"
        "bak" => "IP Whitelisted - Backup Service"
        "badok" => "Threat Scored, but not challenged (score too low)"
        "bad_host" => "Bad or no host header"
        "captchanew" => "User got a new captcha challenge"
        "captchaok" => "User already has cookie"
        "captchaerr" => "Captcha failed, incorrect input"
        "captchasucc" => "Captcha passed, cookie issued"
        "cdnjs" => "Request to a cdnjs resource"
        "chl" => "Captcha/JS Challenege Presented"
        "ctry" => "Country Block"
        "cyclic" => "CloudFlare Loop"
        "dnserr" => "DNS 1001 Error"
        "grey" => "Greylisted"
        "ip" => "Individual IP Blocked"
        "ipr16" => "IP /16 Range Blocked"
        "ipr24" => "IP /24 Range Blocked"
        "jschlerr" => "JavaScript failed, incorrect input"
        "jschlfail" => "JavaScript failed"
        "jschlnew" => "JavaScript challenge issued"
        "jschlok" => "User already has cookie"
        "jschlsucc" => "JavaScript pass, cookie issued"
        "l7ddos" => "L7 DDoS Attack Mitigation"
        "mob" => "IP Whitelisted - Mobile Proxy Service"
        "mon" => "IP Whitelisted - Monitoring Service"
        "no_existing_host" => "Ownership lookup failed; host not on CloudFlare"
        "nr" => "No Reputation Data For IP"
        "reserved_ip" => "DNS points to local or disallowed IP"
        "reserved_ip6" => "DNS points to local or disallowed IPv6"
        "scan" => "IP Whitelisted - Security Scanning Service"
        "se" => "IP Whitelisted - Search Engine"
        "snimismatch" => "1013 Error"
        "tempok" => "Captcha/JS Challenege"
        "ua" => "Blacked User Agent"
        "unknown" => "pathing status is unknown; process as normal"
        "wl" => "IP Whitelisted"
        "zl" => "Lockdown applied"
      }
    }
    translate {
      id => "SSL Protocol Rating"
      field => "clientsslcipher"
      destination => "clientsslciphergrade"
      dictionary => {
        "aead-aes128-gcm-sha256" => "A+"
        "aead-chacha20-poly1305-sha256" => "A+"
        "dhe-rsa-aes256-gcm-sha384" => "A+"
        "dhe-rsa-aes128-gcm-sha256" => "A+"
        "ecdhe-rsa-aes256-gcm-sha384" => "A+"
        "ecdhe-rsa-aes128-gcm-sha256" => "A+"
        "dhe-rsa-aes256-sha256" => "A"
        "dhe-rsa-aes128-sha256" => "A"
        "ecdhe-rsa-aes256-sha384" => "A"
        "ecdhe-rsa-aes128-sha256" => "A"
        "ecdhe-rsa-aes256-sha" => "B"
        "ecdhe-rsa-aes128-sha" => "B"
        "aes256-gcm-sha384" => "C"
        "aes128-gcm-sha256" => "C"
        "aes256-sha256" => "C"
        "aes128-sha256" => "C"
        "aes256-sha" => "C"
        "aes128-sha" => "C"
        "dhe-rsa-aes256-sha" => "C"
        "dhe-rsa-aes128-sha" => "C"
        "des-cbc3-sha" => "D"
        "none" => "F"
      }
    }
    translate {
      id => "Security Level"
      field => "securitylevel"
      destination => "securitylevel"
      override => true
      dictionary => {
        "low" => "low"
        "med" => "medium"
        "high" => "high"
        "hi" => "high"
      }
    }
    translate {
      id => "ELS Zone ID Lookup"
      field => "[domain]"
      destination => "[zone-id]"
      dictionary_path => "D:/Logstash/dictionaries/CloudFlare/auditzones.yaml"
      refresh_behaviour => "replace"
    }
    if "firewallrules" in [firewallmatchessources] {
      mutate {
        id => "Firewall Field Creation"
        add_field => {
          "[edge][firewall][rule][action]" => "%{firewallmatchesruleids}"
          "[edge][firewall][rule][description]" => "%{firewallmatchesruleids}"
          "[edge][firewall][rule][filter]" => "%{firewallmatchesruleids}"
        }
      }
      mutate {
        id => "Firewall Field Conversion"
        convert => {
          "[edge][firewall][rule][action]" => "string"
          "[edge][firewall][rule][description]" => "string"
          "[edge][firewall][rule][filter]" => "string"
        }
        gsub => [
          "[edge][firewall][rule][action]", ",.*", "",
          "[edge][firewall][rule][description]", ",.*", "",
          "[edge][firewall][rule][filter]", ",.*", ""
        ]
      }
      translate {
        id => "Translate ELS Firewall Action"
        field => "[edge][firewall][rule][action]"
        destination => "[edge][firewall][rule][action]"
        dictionary_path => "D:/Logstash/dictionaries/CloudFlare/fw/action.yaml"
        refresh_behaviour => "replace"
        override => true
      }
      translate {
        id => "Translate ELS Firewall Description"
        field => "[edge][firewall][rule][description]"
        destination => "[edge][firewall][rule][description]"
        dictionary_path => "D:/Logstash/dictionaries/CloudFlare/fw/description.yaml"
        refresh_behaviour => "replace"
        override => true
      }
      translate {
        id => "Translate ELS Firewall Expression"
        field => "[edge][firewall][rule][filter]"
        destination => "[edge][firewall][rule][filter]"
        dictionary_path => "D:/Logstash/dictionaries/CloudFlare/fw/expression.yaml"
        refresh_behaviour => "replace"
        override => true
      }
    }
    if "ban" in [edgepathingop] or "chl" in [edgepathingop] or "bad visitor" in [edgepathingop] or "drop" in [wafaction] or "challenge allow" in [wafaction] {
      mutate {
        id => "Mark As Blocked"
        add_field => {
          "blocked" => "true"
        }
      }
      if "drop" in [wafaction] or "challenge allow" in [wafaction] {
        mutate {
          id => "Blocked By WAF"
          add_field => {
            "blocked_reason" => "%{wafrulemessage}"
          }
        }
      }
      if "ban" in [edgepathingop] or "bad visitor" in [edgepathingop] {
        mutate {
          id => "Blocked By Edge"
          add_field => {
            "blocked_reason" => "%{edgepathingsrcdescription}"
          }
        }
      }
      if "chl" in [edgepathingop] {
        mutate {
          id => "Blocked and Challenged"
          add_field => {
            "blocked_reason" => "%{edgepathingstatusdescription}"
          }
        }
      }
    } else {
      mutate {
        id => "Mark As Not Blocked"
        add_field => {
          "blocked" => "false"
        }
      }
    }
    if [originresponsehttpexpires] == "" {
      mutate {
        id => "Remove Blank HTTP Expires"
        remove_field => [ "originresponsehttpexpires" ]
      }
    }
    if [originresponsehttplastmodified] == "" {
      mutate {
        id => "Remove Blank HTTP Last Modified"
        remove_field => [ "originresponsehttplastmodified" ]
      }
    }
    date {
      id => "Date Format HTTP Expires"
      match => [ "originresponsehttpexpires", "dd MMM yyyy HH:mm:ss" ]
      target => "originresponsehttpexpires"
      timezone => "Etc/UTC"
    }
    date {
      id => "Date Format HTTP Last Modified"
      match => [ "originresponsehttplastmodified", "dd MMM yyyy HH:mm:ss" ]
      target => "originresponsehttplastmodified"
      timezone => "Etc/UTC"
    }
    if [clientrequesturi] and [clientrequesturi] =~ ".*\?.*" {
      mutate {
          id => "Client Query Field Creation"
        add_field => {
          "clientrequestquery" => "%{[clientrequesturi]}"
        }
      }
      mutate {
        id => "Client Query Strip"
        gsub => [
          "clientrequestquery", "^.*\?", ""
        ]
      }
      urldecode {
        id => "Client Query Decode"
        field => "clientrequestquery"
      }
    }
    #The following IF will drop any json parsing failures.
    #This may or may not be desirable for your solutions.
    if "_jsonparsefailure" in [tags] {
      drop {
        id => "JSON Parse Fail Drop"
      }
    }
    mutate {
      id => "Restructure To Objects"
      rename => {
        "cacheresponsebytes" => "[cache][response][bytes]"
        "cacheresponsestatus" => "[cache][response][status]"
        "cacheresponsestatusdescription" => "[cache][response][status_description]"
        "cachecachestatus" => "[cache][status]"
        "cachetieredfill" => "[cache][tiered_fill]"
        "clientasn" => "[client][asn]"
        "clientcountry" => "[client][location][country_cf]"
        "clientdevicetype" => "[client][device_type]"
        "clientip" => "[client][ip]"
        "clientipclass" => "[client][ip_class]"
        "[client][location][country_name]" => "[client][location][country]"
        "[client][location][city_name]" => "[client][location][city]"
        "clientrequestbytes" => "[client][request][bytes]"
        "clientrequesthost" => "[client][request][host]"
        "clientrequestmethod" => "[client][request][method]"
        "clientrequestpath" => "[client][request][path]"
        "clientrequestprotocol" => "[client][request][protocol]"
        "clientrequestquery" => "[client][request][query]"
        "clientrequestqueryterms" => "[client][request][query_terms]"
        "clientrequestquerydecode" => "[client][request][query_decode]"
        "clientrequestreferer" => "[client][request][referer]"
        "clientrequesturi" => "[client][request][uri]"
        "clientrequestuseragent" => "[client][request][user_agent]"
        "clientsslcipher" => "[client][ssl][cipher]"
        "clientsslciphergrade" => "[client][ssl][cipher_grade]"
        "clientsslprotocol" => "[client][ssl][protocol]"
        "clientsrcport" => "[client][src_port]"
        "clientxrequestedwith" => "[client][header][x-requested-with]"
        "edgecoloid" => "[edge][colo_id]"
        "edgeendtimestamp" => "[edge][timestamp_end]"
        "[edge][location][city_name]" => "[edge][location][city]"
        "edgepathingop" => "[edge][pathing][op]"
        "edgepathingopdescription" => "[edge][pathing][op_description]"
        "edgepathingsrc" => "[edge][pathing][src]"
        "edgepathingsrcdescription" => "[edge][pathing][src_description]"
        "edgepathingstatus" => "[edge][pathing][status]"
        "edgepathingstatusdescription" => "[edge][pathing][status_description]"
        "edgeratelimitaction" => "[edge][ratelimit_action]"
        "edgeratelimitid" => "[edge][ratelimit_id]"
        "edgerequesthost" => "[edge][request_host]"
        "edgeresponsebytes" => "[edge][response][bytes]"
        "edgeresponsecompressionratio" => "[edge][response][compression_ratio]"
        "edgeresponsecontenttype" => "[edge][response][content_type]"
        "edgeresponsestatus" => "[edge][response][status]"
        "edgeresponsestatusdescription" => "[edge][response][status_description]"
        "edgeserverip" => "[edge][server_ip]"
        "edgestarttimestamp" => "[edge][timestamp_start]"
        "firewallmatchesactions" => "[firewall][matches][actions]"
        "firewallmatchesruleids" => "[firewall][matches][rule_ids]"
        "firewallmatchessources" => "[firewall][matches][sources]"
        "originip" => "[origin][ip]"
        "[origin][location][city_name]" => "[origin][location][city]"
        "originsslprotocol" => "[origin][ssl_protocol]"
        "originresponsebytes" => "[origin][response][bytes]"
        "originresponsehttpexpires" => "[origin][response][http_expires]"
        "originresponsehttplastmodified" => "[origin][response][http_last_modified]"
        "originresponsestatus" => "[origin][response][status]"
        "originresponsestatusdescription" => "[origin][response][status_description]"
        "originresponsetime" => "[origin][response][time]"
        "parentrayid" => "parent_ray_id"
        "rayid" => "ray_id"
        "securitylevel" => "security_level"
        "wafaction" => "[waf][action]"
        "wafflags" => "[waf][flags]"
        "wafmatchedvar" => "[waf][matched_variable]"
        "wafprofile" => "[waf][profile]"
        "wafruleid" => "[waf][rule_id]"
        "wafrulemessage" => "[waf][rule_message]"
        "workercputime" => "[worker][cpu_time]"
        "workerstatus" => "[worker][status]"
        "workersubrequest" => "[worker][subrequest]"
        "workersubrequestcount" => "[worker][subrequest_count]"
        "zoneid" => "zone_id"
      }
      remove_field => [
        "[zone-id]"
      ]
    }
  }
}
output {
  if [waf][action] == "drop" and [waf][rule_message] !~ /anomaly:header:user-agent.*/ and "97.91.237.247" not in [client][ip] {
    email {
      id => "Email Notify"
      to => "wwalker@stlouisco.com, majero@stlouisco.com"
      from => 'CloudFlareLogs@stlouisco.com'
      subject => 'CloudFlare Block: %{[client][request][host]}'
      body => 'The following request was blocked by CloudFlare WAF\n
        Event Time:  %{[@timestamp]}
        Host:  %{[client][request][host]}
        Client IP:  %{[client][ip]}
        Block Reason:  %{[blocked_reason]}
        HTTP Method:  %{[client][request][method]}
        Full URL:  %{[full_url]}'
      address => 'intrly.stlouisco.net'
    }
    # Execute Command Proof of Concept
    # exec {
      # #Specify path to executable
      # command => "D:/Logstash/scripts/EmailNotification_heartbeat_dnnstlouisco.bat"
      # #quiet => true
    # }
  }
  if [type] == "audit" {
    elasticsearch {
      id => "Audit Logs to Elastic"
      cacert => "D:/Logstash/7.9.2/config/certs/certbun.pem"
      user => "elastic"
      password => "K6m^OsUUoE&E"
      hosts => "https://ssselklog.stlouisco.net:9200"
      document_id => "%{[change][id]}"
      template => "D:/Logstash/templates/cloudflareaudittemplate.json"
      template_name => "cloudflareaudit"
      template_overwrite => true
      ilm_rollover_alias => "cloudflareaudit"
      ilm_pattern => "{now/d}-000001"
      ilm_policy => "Delete_After_1YR"
    }
  } else {
    elasticsearch {
      id => "Logs to Elastics"
      cacert => "D:/Logstash/7.9.2/config/certs/certbun.pem"
      user => "elastic"
      password => "K6m^OsUUoE&E"
      hosts => "https://ssselklog.stlouisco.net:9200"
      document_id => "%{[edge][timestamp_start]}%{[ray_id]}"
      template => "D:/Logstash/templates/cloudflaretemplate.json"
      template_name => "cloudflare"
      template_overwrite => true
      index => "cloudflare-%{+YYYY.ww}"
      ilm_policy => "Delete_After_1YR"
    }
  }
}
